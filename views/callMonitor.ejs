<!DOCTYPE html>

<head>
  <meta charset="UTF-8">
  <title>呼び出し画面</title>
  <script type="text/javascript" src="/socket.io/socket.io.js"></script>
  <style>
    /*    tr {
      color: lightblue;
      border: solid 1px;
      padding: 10px;
    }*/

    th,
    td {
      color: lightblue;
      border: solid 1px;
      padding: 10px;
      height: 25%;
      min-height: 200px;
    }

    table {
      border-collapse: collapse;
      padding: 10px;
    }

    

    .textArea {
      background-color: orange;
    }

    *:fullscreen,
    *:-webkit-full-screen,
    *:-moz-full-screen {
      background-color: rgba(255, 255, 255, 1);
    }

    body {
      color: blue;
      background-color: rgba(255, 255, 255, 1);
    }

    .main {
      height: 30%;
      text-align: center;
      vertical-align: middle
    }

    .sub {
      height: 50%;
    }

    .textArea {
      height: 1fr;
    }
  </style>
</head>

<body>

  <div id='main' class="main"></div>
  <table id='sub' class="sub"></table>
  <div class="textArea" id="textArea"></div>
  <button onclick="on('fullscreen')" id="fullsc">全画面</button>


  <script>
    let fullsc = document.getElementById('fullsc');
    function on(name) {
      document.body.requestFullscreen();
      //fullsc.style.display = 'none';
    }

    var socket = io.connect();
    var main = document.getElementById('main');
    let text;
    let tr, textnode, th, td;
    //リストの表示
    socket.on('resList', (data) => {
      listData = data.value;
      write();
    })
    //それぞれの画面に表示する要素の絞り込み  
    function select() {
      selected = [];
      for (let i = 0; i < listData.length; i++) {
        if (listData[i].call) {
          selected.push(listData[i]);
        }
      }
      return selected;
    }
    //html要素内を空にする
    function removeAllChildren(element) {
      while (element.firstChild) {
        element.removeChild(element.firstChild);
      }
    }
    //リストの表示
    let sub = document.getElementById('sub');
    function write() {
      let selected = select();
      removeAllChildren(sub);
      for (let i = 0; i < selected.length; i++) {
        tr = document.createElement('tr');
        textnode = document.createTextNode(selected[i].number);
        th = document.createElement('th');
        th.appendChild(textnode);
        tr.appendChild(th);
        textnode = document.createTextNode(selected[i].room);
        td = document.createElement('td');
        td.appendChild(textnode);
        tr.appendChild(td);
        sub.appendChild(tr);
      }
    }
    //呼び出し音声
    socket.on('call', (data) => {
      main.innerHTML='<p>'+data.num+'番<br>'+data.place+'</p>';
      setInterval(function(){main.innerHTML='<p></p>'},15000)
      t = data.place;
      console.log(t);
      sp1 = '';
      sp2 = '';
      switch (t) {
        case '診療室1':
        case '診療室2':
        case '診療室3':
        case '診療室4':
        case '診療室5':
        case '診療室6':
        case '診療室7':
          sp1 = '待合室、左の入口より、';
          sp2 = t + 'に、おはいりください'
          break;
        case '診療室8':
        case '診療室9':
        case '診療室10':
        case '診療室11':
        case '診療室12':
          sp1 = '待合室、右の入口より、';
          sp2 = t + 'に、おはいりください';
          break;
        case '診療室13':
          sp2 = '2階オペ室へスタッフがご案内します';
          break;
        case '会計':
          sp2 = '会計窓口へ、お越しください'

      }
      console.log('speech');
      speech = new SpeechSynthesisUtterance('受付番号、' + data.num + '番のかた、' + sp1 + sp2);
      speech.lang = 'ja-JP';
      speech.rate = 1;
      speechSynthesis.speak(speech);
    })
    let speech, sp1, sp2, t;

    //案内文
    let textNode;
    let textData;
    let textArea = document.getElementById('textArea');
    socket.on('infoText', function (data) {
      console.log(data);
      textData = data.text;
      console.log(textData);
      textArea.innerHTML = "<marquee>" + textData + "</marquee>";
    })
  </script>
</body>