<!DOCTYPE html>

<head>
  <meta charset="UTF-8">
  <title>呼び出し画面</title>
  <script type="text/javascript" src="/socket.io/socket.io.js"></script>
</head>

<body>
  <div class="container">
    <div class="hedder">
      <div>ご案内</div>
    </div>
    <div class="main">
      <div class="number" id="number">1</div>
      <div class="room" id="room">2</div>
    </div>
    <div class="list" id="list">
      <% for( let i=1; i < 17; i++ ) { %>
        <div class="box"></div>
        <% } %>
    </div>
  </div>
  <button onclick="on('fullscreen')" id="fullsc">全画面</button>


  <script>
    let fullsc = document.getElementById('fullsc');
    function on(name) {
      document.body.requestFullscreen();
      //fullsc.style.display = 'none';
    }

    var socket = io.connect();
    var number = document.getElementById('number');
    var room = document.getElementById('room');
    let text;
    let kari;
    //リストの表示
    socket.on('resList', (data) => {
      listData = data.value;
      write();
    })
    //それぞれの画面に表示する要素の絞り込み  
    function select() {
      selected = [];
      for (let i = 0; i < listData.length; i++) {
        if (listData[i].call) {
          selected.push(listData[i]);
        }
      }
      return selected;
    }
    //html要素内を空にする
    function removeAllChildren(element) {
      while (element.firstChild) {
        element.removeChild(element.firstChild);
      }
    }
    //リストの表示
    let list = document.getElementById('list');
    function write() {
      let selected = select();
      list.innerHTML = '';
      for (let i = 0; i < selected.length; i++) {
        kari = '<div class="box">' + selected[i].number + '</div>';
        list.insertAdjacentHTML("beforeend", kari);
      }
      for (let i = 0; i < 16 - selected.length; i++) {
        kari = '<div class="box"></div>';
        list.insertAdjacentHTML("beforeend", kari);
      }
    }
    //呼び出し音声
    socket.on('call', (data) => {
      number.innerHTML = '<p>' + data.num + '番';
      room.innerHTML='<p>'+data.place;
      //setInterval(function () { number.innerHTML = '<p></p>'; room.innerHTML='<p></p>' }, 15000)
      t = data.place;
      console.log(t);
      sp1 = '';
      sp2 = '';
      switch (t) {
        case '診療室1':
        case '診療室2':
        case '診療室3':
        case '診療室4':
        case '診療室5':
        case '診療室6':
        case '診療室7':
          sp1 = '待合室、左の入口より、';
          sp2 = t + 'に、おはいりください'
          break;
        case '診療室8':
        case '診療室9':
        case '診療室10':
        case '診療室11':
        case '診療室12':
          sp1 = '待合室、右の入口より、';
          sp2 = t + 'に、おはいりください';
          break;
        case '診療室13':
          sp2 = '2階オペ室へスタッフがご案内します';
          break;
        case '会計':
          sp2 = '会計窓口へ、お越しください'

      }
      console.log('speech');
      speech = new SpeechSynthesisUtterance('受付番号、' + data.num + '番のかた、' + sp1 + sp2);
      speech.lang = 'ja-JP';
      speech.rate = 1;
      speechSynthesis.speak(speech);
    })
    let speech, sp1, sp2, t;

    //案内文
    let textNode;
    let textData;
    let textArea = document.getElementById('textArea');
    socket.on('infoText', function (data) {
      console.log(data);
      textData = data.text;
      console.log(textData);
      textArea.innerHTML = "<marquee>" + textData + "</marquee>";
    })
  </script>


  <style>
    .container {
      min-height: 100vh;
      display: grid;
      grid-template-columns: 55% 45%;
      grid-template-rows: 14% 79% 7%;

    }

    .hedder {
      grid-column-start: 1;
      grid-column-end: 5;

      display: flex;
      justify-content: center;
      align-items: center;

      color: white;
      background-color: black;
      text-align: center;
      font-size: 200%;
    }

    .main {
      background-color: blanchedalmond;
      grid-column-start: 1;
      grid-column-end: 2;
      text-align: center;
    }

    .list {
      grid-column-start: 2;
      grid-column-end: 3;
      background-color: cadetblue;
      display: grid;
      grid-template-columns: 25% 25% 25% 25%;
      grid-template-rows: 25% 25% 25% 25%;
    }

    .box {
      width: 100%;
      height: 100%;
      background-color: burlywood;
      box-sizing: border-box;
      border: 1px solid black;
    }
  </style>
</body>