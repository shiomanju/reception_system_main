
<script>
  //リストの表示
  
  //ソケット通信 リストの受け取り、表示
  let listData=[];
  socket.on('resList', function (data) {
    listData=data.value;
    write();
  })
  //それぞれの画面に表示する要素の絞り込み  
  function select() {
    selected=[];
    switch ("<%= roomName %>") {
      case '会計':
        console.log('list16');
        for (let i = 0; i < listData.length; i++) {
          if (listData[i].status === '会計') {
            selected.push(listData[i]);
          }
        }
        break;
      default:
        for (let i = 0; i < listData.length; i++) {
          if (listData[i].room == '<%= roomName %>') {
            selected.push(listData[i]);
          }
        }
        break;
    }
    return selected;
  }
  //html要素内を空にする
  function removeAllChildren(element) {
    while (element.firstChild) {
      element.removeChild(element.firstChild);
    }
  }
  //リストの表示
  let List = document.getElementById('list');
  function write() {
    let selected=select();
    removeAllChildren(List);
    for (let i = 0; i < selected.length; i++) {
      let a = document.createElement('option');
      let b = document.createTextNode(selected[i].number+','+selected[i].room+','+selected[i].status);
      a.value=selected[i].number;
      a.appendChild(b);
      List.appendChild(a);
    }
  }

  
</script>
